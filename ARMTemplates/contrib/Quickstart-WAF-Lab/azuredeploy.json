{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "SecureString",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "prefix": {
      "defaultValue": "CUDA",
      "type": "String",
      "metadata": {
        "description": "identifying prefix for all VM's being build. e.g WeProd would become WeProd-VM-CGF (Max 19 char, no spaces, [A-Za-z0-9]"
      }
    },
    "dnsNameForLBIP": {
      "type": "String",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the WAF."
      }
    },
    "license": {
      "allowedValues": [
        "hourly",
        "byol"
      ],
      "type": "String",
      "metadata": {
        "description": "Hourly (PAYG) or BYOL (Bring your own) license"
      },
      "defaultValue": "byol"
    },
    "vmSize": {
      "allowedValues": [
        "Standard_DS1_v2",
        "Standard_DS2_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3"
      ],
      "type": "String",
      "metadata": {
        "description": "Size of instances"
      }
    }

  },
  "variables": {
    "numberofInstances":  "2",
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-08-01",
    "vNetAddressSpace": "172.16.136.0/22",
    "subnetWAF": "172.16.136.0/24",
    "subnetWeb": "172.16.137.0/24",
    "imagePublisher": "barracudanetworks",
    "imageOffer": "waf",
    "wafVmName": "[concat(parameters('prefix'),'-WAF-')]",
    "VmName": "[concat(parameters('prefix'),'-VM-WEB')]",
    "WAFAVSetName": "[concat(variables('wafVmName'),'AV')]",
    "adminUsername": "azureuser",
    "nsgName": "[concat(parameters('prefix'),'-NSG-WAF')]",
    "loadBalancerName": "[concat(variables('wafVmName'),'LB')]",
    "nicNamePrefix": "[concat(variables('wafVmName'),'NIC')]",
    "publicIPAddressName": "[concat(variables('wafVmName'),'PIP')]",
    "vmpublicIPAddressName": "[concat(variables('VmName'),'PIP')]",
    "publicIPAddressType": "Static",
    "vNetName": "[concat(parameters('prefix'),'-VNET')]",
    "vNetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNetName'))]",
    "subnetNameWAF": "[concat(parameters('prefix'),'-SUBNET-WAF')]",
    "subnetRefWAF": "[resourceID('Microsoft.Network/virtualNetworks/subnets',variables('vNetName'),variables('subnetNameWAF'))]",
    "subnetNameWeb": "[concat(parameters('prefix'),'-SUBNET-WEB')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "PublicIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "PublicIPID2": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'),'2')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "frontEndIPConfigID2": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend2')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/loadBalancerBackend')]",
    "lbhttpProbeID": "[concat(variables('lbID'),'/probes/httpProbe')]",
    "vmnameImagePublisher": "Canonical",
    "vmnameImageOffer": "UbuntuServer",
    "OSVersion": "18.04-LTS",
    "vmSubnetRef": "[concat(variables('vnetID'), '/subnets/', variables('subnetNameWeb'))]",
    "webVMNicName": "[concat(variables('vmName'), 'NetworkInterface')]",
    "osDiskType": "Standard_LRS",
    "customcloudinit": "#cloud-config\n#\n#author: trichabadas\n#\n#Installs docker and 9 vulnerable/test docker containers to use as a firing range for labs\n#PetStore does not work at this time when accessed through a browser, so it more really 8 applications.\n#PetStore may work if some CORS settings are disabled on your browser.\n#Each application is installed on a specific port.\n#Please see the specific docker run commands to see the actual port in use for a specific application.\n#The front-end port can be changed before running this file in case you want to use any other port.\n#\n#This command sudo usermod -aG docker ${USER} usually fails, and the user cannot run docker commands without sudo\n#If this is annoying, try running it again while logged in - it will work at this point\n# \n\n#have cloud init manage the hosts file\nmanage_etc_hosts: false\n\nruncmd:\n- date\n- sudo apt-get -y update\n- sudo apt-get -y upgrade\n- sudo apt-get -y remove docker docker-engine docker.io\n- sudo apt install docker.io -y\n- sudo systemctl start docker\n- sudo systemctl enable docker\n- sudo groupadd docker\n- sleep 10\n- sudo usermod -aG docker ${USER}\n- docker pull vulnerables/web-dvwa\n- docker run -d -p 1000:80 vulnerables/web-dvwa\n- docker pull szsecurity/mutillidae\n- docker run -d -p 2000:80 szsecurity/mutillidae\n- docker pull szsecurity/webgoat\n- docker run -d -p 3000:80 szsecurity/webgoat\n- docker pull raesene/bwapp\n- docker run -d -p 4000:80 raesene/bwapp\n- docker pull bkimminich/juice-shop\n- docker run -d -p 5000:80 bkimminich/juice-shop\n- docker pull eystsen/altoro\n- docker run -d -p 6001:8080 eystsen/altoro\n- docker pull kennethreitz/httpbin\n- docker run -d -p 7000:80 kennethreitz/httpbin\n- docker pull mutzel/all-in-one-hackazon:postinstall\n- docker run -d -p 8000:80 mutzel/all-in-one-hackazon:postinstall supervisord -n\n- docker pull swaggerapi/petstore\n- docker run -d -p 9000:8080 swaggerapi/petstore\n- date\n\n"

  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "wafPublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForLBIP')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat(variables('publicIPAddressName'),'2')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "wafPublicIPAddress2"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsNameForLBIP'),'two')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('vmpublicIPAddressName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "vmPublicIPAddress"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]"

      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "sku": {
        "name": "Aligned"
      },
      "name": "[variables('WAFAVSetName')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "WAFAvailabilitySet"
      },
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 5
      },
      "dependsOn": []
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNetName')]",
      "location": "[resourceGroup().location]",
      "DependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"

      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vNetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameWAF')]",
            "properties": {
              "addressPrefix": "[variables('subnetWAF')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          },
          {
            "name": "[variables('subnetNameWeb')]",
            "properties": {
              "addressPrefix": "[variables('subnetWeb')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPInbound",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTPSInbound",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowUnSecureManagementAccess",
            "properties": {
              "description": "Allow Manangement Access",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "8000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowSecureManagementAccess",
            "properties": {
              "description": "Allow Secure Manangement Access",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "8443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowintoApps",
            "properties": {
              "description": "AllowintoApps",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1000,2000,3000,4000,5000,6000,7000,8001,9000",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 140,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'), copyindex(1))]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRefWAF')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/',variables('wafVmName'), copyindex(1),'-MGMT',copyindex(1))]"
                },
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/',variables('wafVmName'), copyindex(1),'-SecureMGMT',copyindex(1))]"
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatRules/',variables('wafVmName'), copyindex(1),'-MGMT',copyindex(1))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatRules/',variables('wafVmName'), copyindex(1),'-SecureMGMT',copyindex(1))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "WAFExternalLB"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "loadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('PublicIPID')]"
              }
            }
          },
          {
            "name": "loadBalancerFrontEnd2",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('PublicIPID2')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "loadBalancerBackend"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "HTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "HTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "DVWA",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 1000,
              "backendPort": 1000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "Mutillidae",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 2000,
              "backendPort": 2000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "WebGoat",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 3000,
              "backendPort": 3000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "BWAPP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 4000,
              "backendPort": 4000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "JuiceShop",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 5000,
              "backendPort": 5000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "Altoro",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 6000,
              "backendPort": 6001,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "HTTPBin",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 7000,
              "backendPort": 7000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "Hackazon",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8000,
              "backendPort": 8002,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          },
          {
            "name": "Petstore",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID2')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 9000,
              "backendPort": 9000,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbhttpProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "httpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 8000,
              "intervalInSeconds": 30,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/',variables('wafVmName'), copyindex(1),'-MGMT',copyIndex(1))]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbMGMTLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8001)]",
        "backendPort": 8000
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'),'/',variables('wafVmName'), copyindex(1),'-SecureMGMT',copyIndex(1))]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbSecureMGMTLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(8444)]",
        "backendPort": 8443
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('wafVmName'), copyindex(1))]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "plan": {
        "name": "[parameters('license')]",
        "Product": "waf",
        "Publisher": "barracudanetworks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('WAFAVSetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('wafVmName'), copyindex(1))]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('license')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('wafVmName'),'osdisk',copyindex(1))]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'),copyindex(1)))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex(1))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('WAFAVSetName'))]"
      ]
    },

    {
      "name": "[variables('webVMNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
      ],
      "tags": {
        "displayName": "webVMNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('vmSubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('vmpublicIPAddressName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-03-01",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('webVMNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VmSize')]"
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "fromImage",
            "managedDisk": {
              "storageAccountType": "[variables('osDiskType')]"
            }
          },
          "imageReference": {
            "publisher": "[variables('vmnameImagePublisher')]",
            "offer": "[variables('vmnameImageOffer')]",
            "sku": "[variables('OSVersion')]",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('webVMNicName'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customdata": "[base64(concat(variables('customcloudinit')))]"

        }
      }
    }

  ]
}